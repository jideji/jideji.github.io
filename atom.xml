<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[That's A Technical Term]]></title>
  <link href="http://jideji.github.io/atom.xml" rel="self"/>
  <link href="http://jideji.github.io/"/>
  <updated>2014-12-14T18:51:54+00:00</updated>
  <id>http://jideji.github.io/</id>
  <author>
    <name><![CDATA[Daniel Josefsson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Android]]></title>
    <link href="http://jideji.github.io/blog/2014/12/13/learning-android/"/>
    <updated>2014-12-13T20:17:58+00:00</updated>
    <id>http://jideji.github.io/blog/2014/12/13/learning-android</id>
    <content type="html"><![CDATA[<p>I have always liked Android. The very idea that you can replace almost anything by installing an app.</p>

<p>I have tried to find online material for learning to program before, but I find that when you want to learn something
technical you really need a physical book. I have been able to write very simple programs, but the GUI part has just
been a mystery. You need something that tells you <em>why</em> you do something in a certain way.</p>

<p>On amazon, the highest ratated android book as &lsquo;Android Programming &ndash; The Big Nerd Ranch Guide&rsquo; by Bill Phillips and
Brian Hardy. After having read about 12 chapter I have to agree that it is a really good book!</p>

<p>Unfortunately it book is now quite old, and they aim to teach you how to write apps that run on devices all the way
down to android 4.2. They say in the book that Froyo (2.2) and Gingerbread (2.3.x) make up of about 50% of all devices
out there. Well according to the <a href="http://developer.android.com/about/dashboards/index.html">latest statistics</a>, that number is now &lt; 10%.</p>

<p>To be honest, since I don&rsquo;t aim to capitalise I wouldn&rsquo;t even have bothered with 50%, only that it would work on my
phone :)</p>

<p>With the arrival of Lollipop I thought I might as well give it a more serious try. No matter what you think about the
new design, at least they&rsquo;ve tried to come up with some relatively clear guidelines!</p>

<p>And this is where I have had a couple of bumps from following the book. It looks like they have broken a few widgets
in Lollipop. One widget (view) that seems to have a quite serious overhaul is the DatePicker. The OnChangedDateListener
will NOT be triggered when you are in calendar mode. Instead you have to set <code>android:datePickerMode=spinner</code> to get
the old style. You have the same problem with TimePicker. You can read more about it
<a href="http://forums.bignerdranch.com/viewtopic.php?f=409&amp;t=8298">here</a>.</p>

<p>Even with these issues, I would still recommend this book if you are interested in learning Android. I would say that
it is almost a requirement to know Java though, you will be struggling otherwise!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Jq to Manipulate JSON]]></title>
    <link href="http://jideji.github.io/blog/2014/10/18/using-jq-to-manipulate-json/"/>
    <updated>2014-10-18T20:42:38+01:00</updated>
    <id>http://jideji.github.io/blog/2014/10/18/using-jq-to-manipulate-json</id>
    <content type="html"><![CDATA[<p>Most of our web services at work speak json. Sometimes it is nice to be able to extract select information from the responses.
I find <a href="http://stedolan.github.io/jq/">jq</a> to be exceptionally well suited for these situations.</p>

<p>The syntax can be perplexing in the beginning, and the tutorial and manual do not (in my opinion) explain in enough
detail how you should think when writing your filters, and how you combine them.</p>

<p>The program takes what is called a filter. A filter basically generates output that is usually based on the input.</p>

<h2>Basic usage</h2>

<p>The simplest case is where you just copy the input to output:</p>

<figure class='code'><figcaption><span>Simple case </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;{&quot;key&quot;: &quot;value&quot;}&#39;</span> | jq .
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;key&quot;</span>: <span class="s2">&quot;value&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since jq pretty-prints the json by default (can be changed to compact mode by using the <code>-c</code> flag) the output is nicely formatted.</p>

<p>The single dot just tells jq to copy the root node. If you just want the value you can type:</p>

<figure class='code'><figcaption><span>Extract the value of field &#8216;key&#8217; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;{&quot;key&quot;: &quot;value&quot;}&#39;</span> | jq .key
</span><span class='line'><span class="s2">&quot;value&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;{&quot;key&quot;: &quot;value&quot;}&#39;</span> | jq -r .key
</span><span class='line'>value
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, <code>-r</code> (<em>raw-output</em>) unwraps the string.</p>

<p>You can use multiple filters on your data. Let us say that you want to count the number of elements in an array. You
first want to pick out the array, and then run a filter called <code>length</code> on it:</p>

<figure class='code'><figcaption><span>Extract the value of field &#8216;key&#8217; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;{&quot;list&quot;: [ &quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot; ]}&#39;</span> | jq <span class="s1">&#39;.list | length&#39;</span>
</span><span class='line'>3
</span></code></pre></td></tr></table></div></figure>


<p>In this example <code>.list</code> picks the array from the <code>list</code> field. This is piped to the <code>length</code> filter which returns the
number of elements in the array.</p>

<h2>Advanced usage</h2>

<p>Now let us consider a slightly more complicated json object. Spotify has an open API where you can search for
tracks and albums.</p>

<p>Let us assume that we want to find songs from the Book Of Mormons.</p>

<p>We will use this search: <a href="https://api.spotify.com/v1/search?type=track&amp;market=gb&amp;q=The+Book+Of+Mormon">https://api.spotify.com/v1/search?type=track&amp;market=gb&amp;q=The+Book+Of+Mormon</a></p>

<p>The json has the following format (excluding a lot of to us uninteresting data):</p>

<figure class='code'><figcaption><span>Spotify json formation </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;tracks&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;items&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;album&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="err">...</span> <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;artists&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;artist name 1&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="err">...</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;track name&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;track_number&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;duration_ms&quot;</span><span class="p">:</span> <span class="mi">123845</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Store the search result as a file:</p>

<figure class='code'><figcaption><span>Save the search result as json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl <span class="s1">&#39;https://api.spotify.com/v1/search?type=track&amp;market=gb&amp;q=The+Book+Of+Mormon&#39;</span> &gt; tracks.json
</span></code></pre></td></tr></table></div></figure>


<p>OK now let&rsquo;s figure out who is performing in these songs:</p>

<figure class='code'><figcaption><span>Extract artist names </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jq -r <span class="s1">&#39;[.tracks.items[].artists[].name] | unique | .[]&#39;</span> tracks.json
</span><span class='line'>Andrew Rannells
</span><span class='line'>Asmeret Gebremichael
</span><span class='line'>Benjamin Schrader
</span><span class='line'>Brian Sears
</span><span class='line'>Brian Tyree Henry
</span><span class='line'>Clark Johnson
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Woah, OK that was a big step! Let us break it down.</p>

<ul>
<li><code>.tracks.items[].artists[].name</code> clearly picks all the artist names</li>
<li>this is then wrapped in an array</li>
<li>the array is sent to a <code>unique</code> filter which sorts the array and removes any duplicates</li>
<li><code>.[]</code> unwraps the array (we would otherwise see an array being returned by jq)</li>
</ul>


<p>The second step is hinting at another feature of jq: you can construct json objects, not only pick them out from
an existing json object.</p>

<p>Now let us say that we want to construct new json from the track.json file.
We want to create a simplifed tracklist for the album.. The tracks should be sorted by track index. We start
off by creating the list of tracks.</p>

<figure class='code'><figcaption><span>Track information, sorted by index </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jq -r <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">&gt; [</span>
</span><span class='line'><span class="s1">&gt;   .tracks.items[] |</span>
</span><span class='line'><span class="s1">&gt;   {</span>
</span><span class='line'><span class="s1">&gt;     index: .track_number,</span>
</span><span class='line'><span class="s1">&gt;     name,</span>
</span><span class='line'><span class="s1">&gt;     album: .album.name,</span>
</span><span class='line'><span class="s1">&gt;   }] | sort_by(.index)&#39;</span> tracks.json
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;index&quot;</span>: 1,
</span><span class='line'>    <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;Hello!&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;album&quot;</span>: <span class="s2">&quot;The Book of Mormon&quot;</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;index&quot;</span>: 1,
</span><span class='line'>    <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;The Book of Mormon in 3 Minutes&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;album&quot;</span>: <span class="s2">&quot;The Book of Mormon in 3 Minutes&quot;</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;index&quot;</span>: 2,
</span><span class='line'>    <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;Book Of Mormon Stories/The Golden Plates&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;album&quot;</span>: <span class="s2">&quot;Sharing Time&quot;</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  ...
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kind of works. As we don&rsquo;t specify the source of <code>name</code>, jq will map it to the input <code>name</code>.
Unfortunately Spotify doesn&rsquo;t let you search exact album titles, so will have to do the filtering ourselves:</p>

<figure class='code'><figcaption><span>Track information only for tracks from the specific album, sorted by index </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jq -r <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">&gt; [</span>
</span><span class='line'><span class="s1">&gt;   .tracks.items[] |</span>
</span><span class='line'><span class="s1">&gt;   select(.album.name == &quot;The Book of Mormon&quot;) |</span>
</span><span class='line'><span class="s1">&gt;   {</span>
</span><span class='line'><span class="s1">&gt;     index: .track_number,</span>
</span><span class='line'><span class="s1">&gt;     name,</span>
</span><span class='line'><span class="s1">&gt;     album: .album.name,</span>
</span><span class='line'><span class="s1">&gt;     length: (.duration_ms / 1000 / 60)</span>
</span><span class='line'><span class="s1">&gt;   }</span>
</span><span class='line'><span class="s1">&gt; ] | sort_by(.index)&#39;</span> tracks.json
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;index&quot;</span>: 1,
</span><span class='line'>    <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;Hello!&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;album&quot;</span>: <span class="s2">&quot;The Book of Mormon&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;length&quot;</span>: 2.8671
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;index&quot;</span>: 2,
</span><span class='line'>    <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;Two By Two&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;album&quot;</span>: <span class="s2">&quot;The Book of Mormon&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;length&quot;</span>: 4.5262166666666666
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;index&quot;</span>: 3,
</span><span class='line'>    <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;You And Me (But Mostly Me)&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;album&quot;</span>: <span class="s2">&quot;The Book of Mormon&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;length&quot;</span>: 2.720666666666667
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  ...
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much better! <code>select</code> only picks the elements that match the given criteria. We also added a <code>duration</code> while we were
at it. As you can see simple maths can be applied.</p>

<p>Now that we have the data we want, we can generate the final json we wanted:</p>

<figure class='code'><figcaption><span>Album information </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jq -r <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">&gt; [</span>
</span><span class='line'><span class="s1">&gt;   .tracks.items[] |</span>
</span><span class='line'><span class="s1">&gt;   select(.album.name == &quot;The Book of Mormon&quot;) |</span>
</span><span class='line'><span class="s1">&gt;   {</span>
</span><span class='line'><span class="s1">&gt;     index:.track_number,</span>
</span><span class='line'><span class="s1">&gt;     name,</span>
</span><span class='line'><span class="s1">&gt;     length:(.duration_ms / 1000 / 60)</span>
</span><span class='line'><span class="s1">&gt;   }</span>
</span><span class='line'><span class="s1">&gt; ] | sort_by(.index) |</span>
</span><span class='line'><span class="s1">&gt; {</span>
</span><span class='line'><span class="s1">&gt;   title: &quot;The Book of Mormon&quot;,</span>
</span><span class='line'><span class="s1">&gt;   average_length: ([ .[].length ] | add / length),</span>
</span><span class='line'><span class="s1">&gt;   tracks: .</span>
</span><span class='line'><span class="s1">&gt; }&#39;</span> tracks.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;title&quot;</span>: <span class="s2">&quot;The Book of Mormon&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;average_length&quot;</span>: 4.2499520833333335,
</span><span class='line'>  <span class="s2">&quot;tracks&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;index&quot;</span>: 1,
</span><span class='line'>      <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;Hello!&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;length&quot;</span>: 2.8671
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;index&quot;</span>: 2,
</span><span class='line'>      <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;Two By Two&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;length&quot;</span>: 4.5262166666666666
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;index&quot;</span>: 3,
</span><span class='line'>      <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;You And Me (But Mostly Me)&quot;</span>,
</span><span class='line'>      <span class="s2">&quot;length&quot;</span>: 2.720666666666667
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    ...
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have the same transformation as before, and then we send it to a new filter:</p>

<ul>
<li><code>title</code> is a hardcoded string</li>
<li><code>average_length</code> is a calculation of the average length of the songs

<ul>
<li>we extract the length of each song and put them in an array. We then pipe it to both <code>add</code> and <code>length</code>. <code>add</code> will
sum up all the values in the array, while length returns the length of the array</li>
</ul>
</li>
<li><code>tracks</code> is simply the json we generated before</li>
</ul>


<p>So you can see that jq is incredibly powerful when it comes to manipulating json. Don&rsquo;t worry if you struggle to
understand everything. To be honest I keep forgetting how it works, which is the reason I put this post together.</p>

<p>The best way to learn is to simply experiment with it. There is an online tool where you
can try: <a href="https://jqplay.org/">jqplay.org</a></p>

<p>There are more functions available, but these are most of what I use. You can find them all in the
<a href="http://stedolan.github.io/jq/manual/">manual</a>. Just make sure you have the latest version of jq!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I-buddy With Raspberry Pi]]></title>
    <link href="http://jideji.github.io/blog/2014/04/08/i-buddy-with-raspberry-pi/"/>
    <updated>2014-04-08T11:03:00+01:00</updated>
    <id>http://jideji.github.io/blog/2014/04/08/i-buddy-with-raspberry-pi</id>
    <content type="html"><![CDATA[<p>I had the i-buddy plugged in at work to the Ubuntu box for a long time, but one day I switched to a laptop, which makes it a little bit less convenient to plug in the i-buddy. The poor thing was collecting dust in a drawer for many months, until this summer I decided to plug it in to my Raspberry Pi as a stand-alone physical event notifier.</p>

<p>Since I had had luck with the linux drivers last time I decided to try it again on the Pi. No luck. It just wouldn&rsquo;t find it! I was probably doing something stupid. Anyways, I decided to try out a python library instead called <a href="https://github.com/ewall/pybuddy">pybuddy</a>. This was fine by me as most Pi projects are written in Python anyway.</p>

<h2>pybuddy</h2>

<p>pybuddy can be used in two ways. You can either use pybuddy.lib in your own program, or you can use pybuddy-daemon.py to start a standalone server which takes commands via port 8888 on 127.0.0.1.</p>

<p>Whether you use pybuddy as library or a server, you might have to configure it. It assumes that your i-buddy&rsquo;s product id is 0x0001. In my case it was 0x0002.</p>

<p>When plugging the i-buddy in, call dmesg:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi@raspberrypi ~/hack <span class="nv">$ </span>dmesg
</span><span class='line'> ...
</span><span class='line'>
</span><span class='line'><span class="o">[</span>   23.603277<span class="o">]</span> usb 1-1.2: new low-speed USB device number 5 using dwc_otg
</span><span class='line'><span class="o">[</span>   23.710086<span class="o">]</span> usb 1-1.2: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1130, <span class="nv">idProduct</span><span class="o">=</span>0002
</span><span class='line'><span class="o">[</span>   23.710116<span class="o">]</span> usb 1-1.2: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>0, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span>0
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>In this case the product id is 0002, so pybuddy has to be updated <a href="https://github.com/ewall/pybuddy/blob/master/pybuddylib.py#L77">here</a>:</p>

<figure class='code'><figcaption><span>pybuddylib.py </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">### iBuddy Device Class</span>
</span><span class='line'><span class="k">class</span> <span class="nc">iBuddyDevice</span><span class="p">:</span>
</span><span class='line'>  <span class="n">USB_VENDOR</span>  <span class="o">=</span> <span class="mh">0x1130</span>
</span><span class='line'>  <span class="n">USB_PRODUCT</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mh">0x0001</span><span class="p">)</span> <span class="c"># &lt;-- change this</span>
</span><span class='line'>  <span class="n">BATTERY</span>     <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">SETUP</span>       <span class="o">=</span> <span class="p">(</span><span class="mh">0x22</span><span class="p">,</span> <span class="mh">0x09</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">)</span>
</span><span class='line'>  <span class="n">MESS</span>        <span class="o">=</span> <span class="p">(</span><span class="mh">0x55</span><span class="p">,</span> <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0x42</span><span class="p">,</span> <span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or equivalent in pybuddy-daemon.py.</p>

<p>To make sure it works, you can run pybuddy-daemon.py (it is self-contained, so remember to update the product id in this file as well!):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>su pybuddy-daemon.py
</span></code></pre></td></tr></table></div></figure>


<p>Then in a separate terminal, type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;DEMO&quot;</span> | nc -4u -w1 127.0.0.1 8888
</span></code></pre></td></tr></table></div></figure>


<p>and you should see the i-buddy flapping, twisting and flashing. Please note that if your USB power plug isn&rsquo;t powerful enough your Pi might actually reboot instead! I got it working with my 2A power plug (though I think the Raspberry PI is not supposed to use more than 1A anyway). I use a powered USB hub just to make sure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I-buddy With Build Scripts]]></title>
    <link href="http://jideji.github.io/blog/2013/11/02/i-buddy-with-build-scripts/"/>
    <updated>2013-11-02T06:54:00+00:00</updated>
    <id>http://jideji.github.io/blog/2013/11/02/i-buddy-with-build-scripts</id>
    <content type="html"><![CDATA[<p>I had been thinking for quite some time that I wanted to build something that I could control from the computer.</p>

<p>Last year it flared up again, when I wanted to get a more obvious indication of how our builds were doing at the office. I then remembered that I&rsquo;d seen something a few years back online called the i-buddy.</p>

<p>The <a href="http://www.i-buddy.com">i-buddy</a> cool computer gadget out there that for some reason has gone unnoticed by most people.</p>

<p>Since it has many different actions (RGB head, flashing heart, flapping wings, twisting) it sounded like just the thing for this purpose.</p>

<p>The i-buddy was originally made solely for use with Live Messenger, but technically inclined people were kind enough to reverse engineer the protocol (<a href="http://imakethin.gs/blog/hacking-the-usb-i-buddy">at least this guy</a>). We now have a few linux drivers and programming libraries out there that can control it. I had an Ubuntu box at work, and since I&rsquo;m a bash fan I went with the linux driver route.</p>

<p>Using <a href="https://github.com/tietomaakari/ibuddy-lkm">ibuddy-lkm</a>, I built and installed a kernel driver. The great thing with this driver is that it gives you a number of virtual files with which you control the i-buddy:</p>

<pre><code>/proc/driver/ibuddy/0/heart
/proc/driver/ibuddy/0/twist
/proc/driver/ibuddy/0/wings
/proc/driver/ibuddy/0/red
/proc/driver/ibuddy/0/green
/proc/driver/ibuddy/0/blue
</code></pre>

<p>Just write any value to one of the files, and that feature will be toggled!</p>

<p>So all I had to do in my build script was to check the response code, and perform a set of actions depending on that response code:</p>

<figure class='code'><figcaption><span>ibuddy.sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>send_commands<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for </span><span class="nb">command </span>in <span class="nv">$*</span>; <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo </span>1 &gt; /proc/driver/ibuddy/0/<span class="nv">$command</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>send_multiple_times<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for </span>f in <span class="k">$(</span>seq 1 <span class="nv">$2</span><span class="k">)</span>; <span class="k">do</span>
</span><span class='line'><span class="k">        for </span>commands in <span class="s2">&quot;$1&quot;</span> <span class="s2">&quot;$1&quot;</span>; <span class="k">do</span>
</span><span class='line'><span class="k">            </span>send_commands <span class="nv">$commands</span>
</span><span class='line'>            sleep 0.15
</span><span class='line'>        <span class="k">done</span>
</span><span class='line'><span class="k">    done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;$@&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ERROR</span><span class="o">=</span><span class="s2">&quot;$?&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -e <span class="s2">&quot;/proc/driver/ibuddy/0&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;IBUDDY NOT FOUND&quot;</span> &gt;&amp;2
</span><span class='line'><span class="k">else</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span> <span class="se">\</span>
</span><span class='line'>
</span><span class='line'>send_commands reset
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$ERROR&quot;</span> <span class="o">=</span> <span class="s2">&quot;0&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>send_commands green
</span><span class='line'>    send_multiple_times <span class="s2">&quot;green heart&quot;</span> 7
</span><span class='line'>    send_commands reset
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span>send_multiple_times <span class="s2">&quot;red wings twist&quot;</span> 15
</span><span class='line'>    send_commands red
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="o">)</span> &amp;
</span><span class='line'>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k"> </span>
</span><span class='line'><span class="nb">exit</span> <span class="nv">$ERROR</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I just had to create an alias by adding the following to my .bashrc file:</p>

<figure class='code'><figcaption><span>.bashrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">mci</span><span class="o">=</span><span class="s1">&#39;$HOME/scripts/ibuddy.sh mvn clean install&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have yet to build something myself that is triggered on builds :)</p>
]]></content>
  </entry>
  
</feed>
